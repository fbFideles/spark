// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	pessoas "spark/domain/pessoas"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// RepoPessoas is an autogenerated mock type for the RepoPessoas type
type RepoPessoas struct {
	mock.Mock
}

// AdicionarPessoa provides a mock function with given fields: req
func (_m *RepoPessoas) AdicionarPessoa(req *pessoas.Pessoa) (*uuid.UUID, error) {
	ret := _m.Called(req)

	var r0 *uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(*pessoas.Pessoa) (*uuid.UUID, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(*pessoas.Pessoa) *uuid.UUID); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(*pessoas.Pessoa) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AdicionarTech provides a mock function with given fields: pessoaID, tech
func (_m *RepoPessoas) AdicionarTech(pessoaID *uuid.UUID, tech *string) error {
	ret := _m.Called(pessoaID, tech)

	var r0 error
	if rf, ok := ret.Get(0).(func(*uuid.UUID, *string) error); ok {
		r0 = rf(pessoaID, tech)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRepoPessoas interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepoPessoas creates a new instance of RepoPessoas. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepoPessoas(t mockConstructorTestingTNewRepoPessoas) *RepoPessoas {
	mock := &RepoPessoas{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
